/**
 * @Author liming
 * @Date 2024/5/31 9:26
 **/

/**
 * 另一个不同点在于字符串反转（JavaScript 面试常见问题）。数组有一个字符串没有的可变更成员函数 reverse() ：
 */
var a = "foo";
var b = ["f","o","o"];
b.push( "!" );

/**
 * reverse() 方法就地反转数组中的元素，并返回同一数组的引用。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。换句话说，数组中的元素顺序将被翻转，变为与之前相反的方向。
 *
 * 要在不改变原始数组的情况下反转数组中的元素，使用 toReversed()。
 */
a.reverse; // undefined
console.log(b.reverse()); // ["!","o","O","f"]
console.log(b); // ["f","O","o","!"]

/**
 * 可惜我们无法“借用”数组的可变更成员函数，因为字符串是不可变的：
 *
 * Array.prototype.reverse.call( a );
 * // 返回值仍然是字符串"foo"的一个封装对象（参见第3章）:(
 * 一个变通（破解）的办法是先将字符串转换为数组，待处理完后再将结果转换回字符串：
 */

var c = a
    // 将a的值转换为字符数组
    .split( "" )
    // 将数组中的字符进行倒转
    .reverse()
    // 将数组中的字符拼接回字符串
    .join( "" );
console.log(c); // "oof"

/**
 * 这种方法的确简单粗暴，但对简单的字符串却完全适用。
 *
 * 请注意！上述方法对于包含复杂字符（Unicode，如星号、多字节字符等）的
 * 字符串并不适用。这时则需要功能更加完备、能够处理 Unicode 的工具库。
 */

/**
 * 如果需要经常以字符数组的方式来处理字符串的话，倒不如直接使用数组。这样就不用在
 * 字符串和数组之间来回折腾。可以在需要时使用 join("") 将字符数组转换为字符串。
 */

