a = 2;
var a;
console.log(a);
/**
 * 很多开发者会认为是 undefined ，因为 var a 声明在 a = 2 之后，他们自然而然地认为变量
被重新赋值了，因此会被赋予默认值 undefined 。但是，真正的输出结果是 2 。
 */

/**
 * 为了搞明白这个问题，我们需要回顾一下第 1 章中关于编译器的内容。回忆一下，引擎会
在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的
声明，并用合适的作用域将它们关联起来。第 2 章中展示了这个机制，也正是词法作用域
的核心内容。
因此，正确的思考思路是，包括变量和函数在内的所有【声明】都会在任何代码被执行前首先
被处理。
当你看到 var a = 2; 时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个
声明： var a; 和 a = 2; 。第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在
原地等待执行阶段。
我们的第一个代码片段会以如下形式进行处理：
var a;
a = 2;
console.log( a );
其中第一部分是编译，而第二部分是执行。
 */