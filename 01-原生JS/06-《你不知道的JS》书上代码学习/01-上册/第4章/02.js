console.log(a);  //undefined
var a = 2;

/**
 * 鉴于上一个代码片段所表现出来的某种非自上而下的行为特点，你可能会认为这个代码片
段也会有同样的行为而输出 2 。还有人可能会认为，由于变量 a 在使用前没有先进行声明，
因此会抛出 ReferenceError 异常。
不幸的是两种猜测都是不对的。输出来的会是 undefined 。

因此，打个比方，这个过程就好像变量和函数声明从它们在代码中出现的位置被“移动”
到了最上面。这个过程就叫作提升。
换句话说，先有蛋（声明）后有鸡（赋值）。

类似地，我们的第二个代码片段实际是按照以下流程处理的：
var a;
console.log( a );
a = 2;
 */

/**
 * 因此，打个比方，这个过程就好像变量和函数声明从它们在代码中出现的位置被“移动”
到了最上面。这个过程就叫作提升。
换句话说，先有蛋（声明）后有鸡（赋值）。

只有声明本身会被提升，而赋值或其他运行逻辑会留在 原地 。如果提升改变
了代码执行的顺序，会造成非常严重的破坏。
 */