// https://segmentfault.com/a/1190000004581945
/**
 * apply使用的场景，更多的使用在这样一个场景：
 * 需要将数组转化为参数列表。
 * @type {number[]}
 */
var list1 = [0, 1, 2];
var list2 = [3, 4, 5];
[].push.apply(list1, list2);

console.log(list1);// >>> [0,1,2,3,4,5]

/**
 * list1调用了属于数组对象的push方法，这个push方法需要传入一个参数列表，而恰好我们有了list2这个数组类型的参数列表，实现了拼接操作。
 * 第三行就相当于：
 *
 * list1.push(3,4,5);
 */

/**
 * 这段代码是在 JavaScript 中执行的。它的作用是将 list2 中的元素添加到 list1 的末尾，最终将会把 list1 变为 [0, 1, 2, 3, 4, 5]。
 *
 * 具体来说，它使用了 JavaScript 的 apply 函数和 push 方法。apply 函数可以接受两个参数：一个是要调用的函数，另一个是一个数组，表示函数的参数。在这里，它把 push 方法作为函数调用，并且把 list2 作为参数传入。
 *
 * 由于 apply 函数可以接受一个数组作为参数，所以它可以用来将一个数组的所有元素作为参数传入一个函数。在这段代码中，apply 函数将 list2 中的所有元素作为参数传入了 push 方法，这样就可以将 list2 中的所有元素一次性添加到 list1 的末尾。
 *
 * 最后，console.log(list1) 用来输出 list1 的值，即 [0, 1, 2, 3, 4, 5]。
 */