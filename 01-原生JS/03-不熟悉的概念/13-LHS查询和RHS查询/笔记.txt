如果查找的目的是对变量进行赋值，那么就会使用LHS查询；如果目的是获取变量的值，就会使用RHS查询。

当对一个变量执行RHS查询时，如果遍历该变量所在处的词法作用域未能找到这个变量，JS引擎就会抛出 ReferenceError 错误。如果成功查询到了这个变量，但是对这个变量执行不合理操作，比如对一个非函数类型的值进行函数调用，或者引用null或undefined类型中的值中的属性，JS引擎就会抛出 TypeError 错误。

当对一个变量执行LHS查询时，同样在遍历作用域后无法找到该变量，在非ES5的严格模式下，系统就会自动在全局作用域中创建一个同名变量。而在ES5的严格模式下，LHS查询失败时JS引擎会抛出一个同RHS一样的 ReferenceError 错误。

作用域是根据名称查找变量的一套规则。

作用域定义了变量的可见性或可访问性。大白话来说，就是一个变量能不能被访问或引用，是由它的作用域决定的。

`当一个变量在当前作用域无法找到时，便会尝试寻找其外层的作用域，如果还找不到，再继续往外寻找（只会往外寻找，不会寻找兄弟作用域，更不会往内寻找）。`这种如同链条一样的寻找规则便被称为作用域链。

函数的作用域是它**定义时**的作用域，而不是调用时。