/*
 * @Author: liming
 * @Date: 2021-09-02 08:43:59
 * @LastEditTime: 2021-09-02 08:49:37
 * @FilePath: \07-立即执行函数与闭包\04.js
 */

// 出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。

// 那就是在函数的内部，再定义一个函数。
/**
 * 在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的"链式作用域"结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。

既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！
 */

function f1() {
  var n = 999;
  function f2() {
    //f2函数，就是闭包。
    //各种专业文献上的"闭包"（closure）定义非常抽象，很难看懂。我的理解是，【闭包就是能够读取其他函数内部变量的函数。】
    //由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成"定义在一个函数内部的函数"。
    // 所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。
    console.log(n);
  }
  return f2;
}

f1()(); //999

var result = f1();
result(); //999
