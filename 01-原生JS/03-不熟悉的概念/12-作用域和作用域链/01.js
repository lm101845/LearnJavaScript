/**
 * 
 * 函数的作用域是它定义时的作用域，而不是调用时
 * 在例子中，执行 func2 函数时往上寻找的作用域是在 func2 定义时的作用域，
 * 而不是调用时的作用域。
 * 
 * 作用域的好处？
    防止命名冲突：你写了一万行的代码文件，如果没有作用域，你要给每个变量取独一无二的名字，屁股想想也知道是种折磨。
    安全性： 变量不会被外部访问，保证了变量值不会被随意修改。你定义在函数内的变量，如果能在几千行之后不小心被修改，脚趾头想想也知道是种折磨。
    更高级的语法：封装、面向对象等的实现离不开对变量的隔离，这是依靠作用域所达到的。

    写代码时不用区分它什么全局使用域、局部作用域、块作用域啥的概念。
    只用记得大括号就是一个作用域，寻找变量永远是从内往外找。现在我们的编辑器基本都有缩进格式化， 从当前代码块的位置一层一层往左，就是它所能引用到的所有变量。
打个比方，就像我们每个家庭就是一个作用域，当我们需要一笔手术费掏不出钱的时候，
肯定是先在家里找，问问父母兄弟姐妹啥的，不会去求助其他陌生的家庭。
还没有的话就往外到熟人关系这个作用域里问问。还不行就向街道居委会求助。
居委会也没办法再向国家求援。从最亲近的关系找起，一层一层圈子往外，
这就是作用域与作用域链。

最后强烈建议大家使用 let 命名变量，放弃 var！
 */
function func() {
    let variable = "我是 func 内的变量"
    function func2() {
        console.log(variable)
    }
    return func2
}

{
    let variable = "我是大括号内的变量"
    let func2 = func()
    func2()
}
