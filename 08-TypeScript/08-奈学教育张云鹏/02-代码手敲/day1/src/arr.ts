// let arr:[] = [1,2,3,4,5];
//这样写会报错，必须要标记数组里面的元素是什么类型

//数组声明方式1：使用方括号的形式声明数组
let arr: number[] = [1, 2, 3, 4, 5];
//你声明的数组，长度是不确定的，但是里面元素的类型是确定的
console.log(arr);

//数组声明方式2：使用泛型的方式声明数组
let arr2: Array<number> = [1, 2, 3, 4, 5, 6];
// arr2.push('a');
//但是这样声明的数组它是单类型的，里面的元素类型必须要一致
console.log(arr2);

//如果你想写一个多类型的数组，可以使用元祖

// let arr3: [number, string, boolean] = [1, 'a', true, 1];
// //这样写就会报错，跟前面类型对不上了
// //  Source has 4 element(s) but target allows only 3.
// console.log(arr3);

let arr4: [number, string, boolean] = [1, 'a', true];
arr4.push(1)
//这样后面加是可以的,你在声明的时候不可以多添加元素(arr3就会报错)
//但是声明完毕之后就可以添加元素了(但是不建议这么做)
//因为它把它当成元祖的话，就默认它的长度是固定的了
// arr4[3] = 1;
//但是使用下标的方式添加元素不可以
arr[2] = 1;  //改它的元素范围的值是可以用下标的
console.log(arr4);

/**
 *在TypeScript的世界中为数组类型的数据增加了元组的实
    现，但其特性主要体现在编译过程，⽣成的代码中类型会恢复为数组 
 **/

//如果你想要写一个长度和里面的类型都是灵活的数组，可以把里面的类型写成any
//但是这样写法都是小范围固定的，我们的数组长度一般都是固定的，里面的类型基本也是一致的
let arr5: any[] = [1, 'a', true];
arr5.push(1);
//这样写可以用下标来改变它的长度，而且任意位置，填啥都可以
arr5[6] = 100;

let arr6: Array<any> = [1, 'a', true];
//这样写可以用下标来改变它的长度，而且任意位置，填啥都可以
arr6.push(100);
arr6[85] = 10;


